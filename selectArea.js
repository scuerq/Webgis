var areaSelection;

function addSelectArea(map) {
    // Ajouter le contr√¥le √† la carte avec configuration
    areaSelection = new window.leafletAreaSelection.DrawAreaSelection({
        active: false, // Le plugin commence comme actif
        fadeOnActivation: true, // La carte est partiellement estomp√©e lors du dessin
        onPolygonReady: function(polygon, control) {
            var elementsTrouves = getElementsInPolygon(poiSearchLayerGroup, polygon);
	    bindPopupHtml(polygon, elementsTrouves);
	},
        onButtonActivate: function (control, event) {
            console.log("Le bouton d'activation a √©t√© cliqu√©");
        },
        onButtonDeactivate: function (polygon, control, event) {
            console.log("Le bouton de d√©sactivation a √©t√© cliqu√©");
        }
    });

    // Ajouter le contr√¥le √† la carte
    areaSelection.addTo(map);

}

function getElementsInPolygon(poiSearchLayerGroup, polygon) {
    var results = [];

    try {
        if (!poiSearchLayerGroup || !polygon) {
            console.error("Erreur : groupe de couches ou polygone invalide !");
            return results;
        }

        var polygonGeoJSON = polygon.toGeoJSON();

        // R√©cup√©rer les sous-couches de poiSearchLayerGroup
        Object.values(poiSearchLayerGroup._layers).forEach(layerGroup => {
            if (!layerGroup._layers) return; // V√©rifier si c'est bien un groupe de couches

            Object.values(layerGroup._layers).forEach(layer => {
                try {
                    if (!layer.feature) return; // Ignorer les couches sans GeoJSON
			
 	  	    if (!layer._map) return; 

                    var layerGeoJSON = layer.toGeoJSON();

                    // V√©rifier si l'√©l√©ment est dans le polygone
                    if (turf.booleanIntersects(layerGeoJSON, polygonGeoJSON)) {
                        results.push({
                            type: layerGeoJSON.geometry.type,
                            popupContent: layer.getPopup() ? layer.getPopup().getContent() : "Pas de popup",
                            properties: layer.feature.properties || {}, // R√©cup√©rer les donn√©es GeoJSON
                            coordinates: layerGeoJSON.geometry.coordinates
                        });
                    }
                } catch (err) {
                    console.error("Erreur sur une couche:", err);
                }
            });
        });

    } catch (err) {
        console.error("Erreur dans getElementsInPolygon:", err);
    }

    console.log("√âl√©ments trouv√©s dans le polygone:", results);
    return results;
}


function generatePropertiesTable(results) {
    // Si `results` est vide ou non d√©fini
    if (!results || results.length === 0) {
        return "<p>Aucune donn√©e disponible</p>"; // Message si aucune donn√©e
    }

    // D√©but du tableau HTML
    let tableHtml = "<table id='propertiesTable' class='table table-bordered table-striped'>";
    tableHtml += "<thead><tr>";
    
    // R√©cup√®re toutes les cl√©s (propri√©t√©s) des premiers objets de `results`
    let propertiesKeys = Object.keys(results[0][0].properties); 
    
    // Cr√©er les en-t√™tes du tableau (les cl√©s des propri√©t√©s)
    propertiesKeys.forEach(key => {
        tableHtml += `<th>${key}</th>`;
    });
    tableHtml += "</tr></thead><tbody>";

    // Ajouter les donn√©es dans les lignes du tableau (pour chaque objet dans `results`)
    results[0].forEach(result => {
        tableHtml += "<tr>";
        propertiesKeys.forEach(key => {
            // Ajouter les valeurs des propri√©t√©s dans les cellules
            tableHtml += `<td>${result.properties[key] || "N/A"}</td>`;
        });
        tableHtml += "</tr>";
    });

    tableHtml += "</tbody></table>";

    return tableHtml;
}


// Fonction pour afficher un popup avec un titre, un tableau de propri√©t√©s et un bouton d'export
function bindPopupHtml(polygon, result) {
    // G√©n√©rer le tableau des propri√©t√©s √† partir de "result"
    let propertiesTableHtml = generatePropertiesTable([result]);  // Passer "result" sous forme de tableau √† la fonction
	
	// V√©rifier si result et result.properties existent avant d'acc√©der √† layerType
    let layerType = result[0].properties.layerType || "Donn√©es du Polygone";
        
     // Cr√©er le contenu du popup avec la liste d√©roulante, le tableau et un bouton "export"
    let popupContent = `
        
        <div class="titre">
			<strong>${layerType}</strong>
		</div>
        <div style="max-height: 300px; overflow-y: auto;">
            ${propertiesTableHtml}
        </div>
        <button id="exportBtn" class="btn btn-primary mt-2">Export</button>
    `;


    // Cr√©er et afficher un popup sur la carte
    L.popup()
        .setLatLng(polygon.getBounds().getCenter())  // Placer le popup au centre du polygone
        .setContent(popupContent)  // Ajouter le contenu du popup
        .openOn(map);  // Afficher le popup sur la carte

    // Initialiser DataTables sur le tableau
    $(document).ready(function() {
        $('#propertiesTable').DataTable();  // Initialiser DataTables sur le tableau
    });

    document.getElementById('exportBtn').addEventListener('click', function() {
		exportDataTable();
	});
}


// üìå **Export Excel (XLSX)**
function exportToExcel(dataArray) {
    let wb = XLSX.utils.book_new(); // Cr√©er un nouveau fichier Excel
    let ws = XLSX.utils.json_to_sheet(dataArray); // Convertir les donn√©es en feuille Excel

    XLSX.utils.book_append_sheet(wb, ws, "Donn√©es"); // Ajouter la feuille au fichier
    
    XLSX.writeFile(wb, "exported_data.xlsx");
}

// üìå **Export DataTables**
function exportDataTable() {
    let table = $('#propertiesTable').DataTable();
    let dataArray = [];
    
    // R√©cup√©ration des en-t√™tes
    let headers = [];
    $('#propertiesTable thead th').each(function () {
        headers.push($(this).text().trim());
    });
    
    // R√©cup√©ration des donn√©es
    table.rows().every(function () {
        let row = {};
        $(this.node()).find('td').each(function (index) {
            row[headers[index]] = $(this).text().trim();
        });
        dataArray.push(row);
    });
    
    exportToExcel(dataArray);
}
